// Initialize variables
let userId = null;
let userData = {
    limit: 60,
    weeklyData: Array(7).fill(0),
    appUsage: {},
    badges: {},
    completedActivities: {},
    customActivities: [],
    underLimitStreak: 0,
    learningStreak: 0,
    readingStreak: 0,
    exerciseStreak: 0,
    quizScores: { physical: 0, mental: 0, concentration: 0 },
    quizHistory: [],
    lastLoginDate: null,
    lastActivityDate: null,
    activityHistory: {}
};

const todayIndex = new Date().getDay(); // 0=Sun, 1=Mon, ..., 6=Sat

const socialApps = [
    { id: 'facebook', name: 'Facebook', color: '#1877f2', iconClass: 'fa-brands fa-facebook' },
    { id: 'instagram', name: 'Instagram', color: '#E4405F', iconClass: 'fa-brands fa-instagram' },
    { id: 'tiktok', name: 'TikTok', color: '#000000', iconClass: 'fa-brands fa-tiktok' },
    { id: 'twitter', name: 'Twitter', color: '#1DA1F2', iconClass: 'fa-brands fa-x-twitter' },
    { id: 'threads', name: 'Threads', color: '#000000', iconClass: 'fa-brands fa-threads' },
    { id: 'youtube', name: 'YouTube', color: '#FF0000', iconClass: 'fa-brands fa-youtube' },
];

const defaultHealthyActivities = [
    { id: 'reading', name: 'ƒê·ªçc s√°ch 30 ph√∫t' },
    { id: 'exercise', name: 'T·∫≠p th·ªÉ d·ª•c 15 ph√∫t' },
    { id: 'learning', name: 'H·ªçc t·∫≠p 60 ph√∫t' },
    { id: 'music', name: 'Th∆∞ gi√£n v·ªõi √¢m nh·∫°c 10 ph√∫t' },
    { id: 'conversation', name: 'Tr√≤ chuy·ªán tr·ª±c ti·∫øp' },
    { id: 'pre_sleep_tech_free', name: 'Kh√¥ng s·ª≠ d·ª•ng ƒëi·ªán tho·∫°i 30 ph√∫t tr∆∞·ªõc khi ng·ªß' },
    { id: 'post_wake_tech_free', name: 'Kh√¥ng s·ª≠ d·ª•ng m·∫°ng x√£ h·ªôi ngay khi v·ª´a ng·ªß d·∫≠y' }
];

const allBadges = [
    { id: 'first_day', name: 'Ng√†y ƒë·∫ßu ti√™n', description: 'ƒêƒÉng nh·∫≠p v√†o ·ª©ng d·ª•ng', icon: '‚òÄÔ∏è' },
    { id: 'under_limit_1', name: 'Ki·ªÉm so√°t t·ªët', description: 'Gi·ªØ th·ªùi gian d∆∞·ªõi gi·ªõi h·∫°n trong 1 ng√†y', icon: '‚úÖ' },
    { id: 'under_limit_5', name: 'Chu·ªói 5 ng√†y', description: 'Gi·ªØ th·ªùi gian d∆∞·ªõi gi·ªõi h·∫°n trong 5 ng√†y li√™n ti·∫øp', icon: 'üèÖ' },
    { id: 'under_limit_10', name: 'Chuy√™n gia k·ª∑ lu·∫≠t', description: 'Gi·ªØ th·ªùi gian d∆∞·ªõi gi·ªõi h·∫°n trong 10 ng√†y li√™n ti·∫øp', icon: 'ü•á' },
    { id: 'under_limit_20', name: 'Th·ªëng tr·ªã', description: 'Gi·ªØ th·ªùi gian d∆∞·ªõi gi·ªõi h·∫°n trong 20 ng√†y li√™n ti·∫øp', icon: 'üëë' },
    { id: 'first_activity', name: 'Ho·∫°t ƒë·ªông ƒë·∫ßu ti√™n', description: 'Ho√†n th√†nh ho·∫°t ƒë·ªông l√†nh m·∫°nh ƒë·∫ßu ti√™n', icon: 'üå±' },
    { id: 'all_activities', name: 'To√†n nƒÉng', description: 'Ho√†n th√†nh t·∫•t c·∫£ ho·∫°t ƒë·ªông l√†nh m·∫°nh trong m·ªôt ng√†y', icon: 'üåü' },
    { id: 'quiz_pro', name: 'Chuy√™n gia s·ª©c kh·ªèe', description: 'Ho√†n th√†nh b√†i ki·ªÉm tra s·ª©c kh·ªèe', icon: 'üß†' },
    { id: 'dependency_low_50', name: 'T·ª± ch·ªß s·ªë', description: 'ƒêi·ªÉm ph·ª• thu·ªôc d∆∞·ªõi 50%', icon: '‚öñÔ∏è' },
    { id: 'dependency_low_40', name: 'Gi·∫£i ph√≥ng', description: 'ƒêi·ªÉm ph·ª• thu·ªôc d∆∞·ªõi 40%', icon: 'üïäÔ∏è' },
    { id: 'dependency_low_30', name: 'Ch·ªß nh√¢n cu·ªôc s·ªëng', description: 'ƒêi·ªÉm ph·ª• thu·ªôc d∆∞·ªõi 30%', icon: 'üîÆ' },
    { id: 'learning_streak_5', name: 'Chu·ªói h·ªçc t·∫≠p 5', description: 'Ho√†n th√†nh ho·∫°t ƒë·ªông h·ªçc t·∫≠p 5 ng√†y li√™n ti·∫øp', icon: 'üìñ' },
    { id: 'learning_streak_10', name: 'Chu·ªói h·ªçc t·∫≠p 10', description: 'Ho√†n th√†nh ho·∫°t ƒë·ªông h·ªçc t·∫≠p 10 ng√†y li√™n ti·∫øp', icon: 'üéì' },
    { id: 'reading_streak_5', name: 'Chu·ªói ƒë·ªçc s√°ch 5', description: 'Ho√†n th√†nh ho·∫°t ƒë·ªông ƒë·ªçc s√°ch 5 ng√†y li√™n ti·∫øp', icon: 'üìï' },
    { id: 'reading_streak_10', name: 'Chu·ªói ƒë·ªçc s√°ch 10', description: 'Ho√†n th√†nh ho·∫°t ƒë·ªông ƒë·ªçc s√°ch 10 ng√†y li√™n ti·∫øp', icon: 'üìö' },
    { id: 'exercise_streak_5', name: 'Chu·ªói t·∫≠p th·ªÉ d·ª•c 5', description: 'Ho√†n th√†nh ho·∫°t ƒë·ªông t·∫≠p th·ªÉ d·ª•c 5 ng√†y li√™n ti·∫øp', icon: 'üí™' },
    { id: 'exercise_streak_10', name: 'Chu·ªói t·∫≠p th·ªÉ d·ª•c 10', description: 'Ho√†n th√†nh ho·∫°t ƒë·ªông t·∫≠p th·ªÉ d·ª•c 10 ng√†y li√™n ti·∫øp', icon: 'üèãÔ∏è' },
    { id: 'custom_activity', name: 'S√°ng t·∫°o', description: 'Th√™m m·ªôt ho·∫°t ƒë·ªông l√†nh m·∫°nh c·ªßa ri√™ng b·∫°n', icon: 'üé®' },
];

// ƒê√É S·ª¨A: C·∫≠p nh·∫≠t thang ƒëi·ªÉm kh·∫£o s√°t t·ª´ 1-5 th√†nh 0-4
const quizQuestions = {
    physical: [
        { q: "B·∫°n c√≥ th∆∞·ªùng xuy√™n c·∫£m th·∫•y ƒëau ƒë·∫ßu, m·ªèi m·∫Øt, ho·∫∑c ƒëau c·ªï, vai, g√°y kh√¥ng?", score: [0, 1, 2, 3, 4] },
        { q: "Gi·∫•c ng·ªß c·ªßa b·∫°n c√≥ b·ªã gi√°n ƒëo·∫°n ho·∫∑c kh√≥ ng·ªß do s·ª≠ d·ª•ng thi·∫øt b·ªã ƒëi·ªán t·ª≠ kh√¥ng?", score: [0, 1, 2, 3, 4] },
        { q: "B·∫°n c√≥ th∆∞·ªùng xuy√™n c·∫£m th·∫•y c∆° th·ªÉ m·ªát m·ªèi, u·ªÉ o·∫£i ngay c·∫£ khi kh√¥ng l√†m vi·ªác n·∫∑ng nh·ªçc kh√¥ng?", score: [0, 1, 2, 3, 4] },
        { q: "B·∫°n c√≥ c·∫£m th·∫•y kh√≥ khƒÉn khi r·ªùi kh·ªèi m√†n h√¨nh ƒë·ªÉ tham gia c√°c ho·∫°t ƒë·ªông th·ªÉ ch·∫•t kh√¥ng?", score: [0, 1, 2, 3, 4] },
        { q: "B·∫°n c√≥ th∆∞·ªùng xuy√™n c√≥ nh·ªØng b·ªØa ƒÉn qua loa ƒë·ªÉ ti·∫øp t·ª•c l∆∞·ªõt m·∫°ng kh√¥ng?", score: [0, 1, 2, 3, 4] },
    ],
    mental: [
        { q: "B·∫°n c√≥ th∆∞·ªùng xuy√™n c·∫£m th·∫•y lo l·∫Øng, cƒÉng th·∫≥ng ho·∫∑c d·ªÖ c√°u g·∫Øt kh√¥ng?", score: [0, 1, 2, 3, 4] },
        { q: "B·∫°n c√≥ c·∫£m th·∫•y √°p l·ª±c ph·∫£i th·ªÉ hi·ªán m·ªôt h√¨nh ·∫£nh ho√†n h·∫£o tr√™n m·∫°ng kh√¥ng?", score: [0, 1, 2, 3, 4] },
        { q: "B·∫°n c√≥ c·∫£m th·∫•y bu·ªìn b√£ ho·∫∑c tr·ªëng r·ªóng khi kh√¥ng ƒë∆∞·ª£c l∆∞·ªõt m·∫°ng kh√¥ng?", score: [0, 1, 2, 3, 4] },
        { q: "B·∫°n c√≥ c·∫£m th·∫•y lo s·ª£ m√¨nh s·∫Ω b·ªè l·ª° c√°c xu h∆∞·ªõng, tin t·ª©c tr√™n m·∫°ng x√£ h·ªôi kh√¥ng?", score: [0, 1, 2, 3, 4] },
        { q: "B·∫°n c√≥ th·∫•y m√¨nh d·ªÖ d√†ng so s√°nh b·∫£n th√¢n v·ªõi ng∆∞·ªùi kh√°c tr√™n m·∫°ng x√£ h·ªôi kh√¥ng?", score: [0, 1, 2, 3, 4] },
    ],
    concentration: [
        { q: "B·∫°n c√≥ d·ªÖ b·ªã xao nh√£ng b·ªüi ƒëi·ªán tho·∫°i khi ƒëang l√†m vi·ªác/h·ªçc t·∫≠p kh√¥ng?", score: [0, 1, 2, 3, 4] },
        { q: "B·∫°n c√≥ ki·ªÉm tra ƒëi·ªán tho·∫°i ngay khi nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o kh√¥ng?", score: [0, 1, 2, 3, 4] },
        { q: "B·∫°n c√≥ c·∫£m th·∫•y kh√≥ khƒÉn khi ph·∫£i t·∫≠p trung v√†o m·ªôt cu·ªôc tr√≤ chuy·ªán tr·ª±c ti·∫øp?", score: [0, 1, 2, 3, 4] },
        { q: "B·∫°n c√≥ th∆∞·ªùng b·ªã gi√°n ƒëo·∫°n khi ƒëang th·ª±c hi·ªán m·ªôt nhi·ªám v·ª• kh√¥ng?", score: [0, 1, 2, 3, 4] },
        { q: "B·∫°n c√≥ th√≥i quen s·ª≠ d·ª•ng ƒëi·ªán tho·∫°i khi ƒëang ƒë·ªçc s√°ch kh√¥ng?", score: [0, 1, 2, 3, 4] }, 
    ],
};

const quizOptions = ["Kh√¥ng bao gi·ªù", "Hi·∫øm khi", "Th·ªânh tho·∫£ng", "Th∆∞·ªùng xuy√™n", "Lu√¥n lu√¥n"];

// Pomodoro Timer Variables
const pomodoro = {
    workDuration: 25 * 60, // 25 minutes in seconds
    breakDuration: 5 * 60, // 5 minutes in seconds
    timer: null,
    isWorkTime: true,
    isRunning: false,
    timeRemaining: 0,
    intervalId: null
};

// Countdown Timer Variables
let countdownInterval = null;
let currentHistoryDate = new Date();

// Initialize localStorage
function initLocalStorage() {
    if (!localStorage.getItem('userId')) {
        userId = 'user_' + Math.random().toString(36).substr(2, 9);
        localStorage.setItem('userId', userId);
    } else {
        userId = localStorage.getItem('userId');
    }

    const savedData = localStorage.getItem('userData');
    if (savedData) {
        userData = JSON.parse(savedData);
        
        // Initialize activityHistory if it doesn't exist
        if (!userData.activityHistory) {
            userData.activityHistory = {};
            saveData();
        }
    } else {
        saveData();
    }
    
    // Check for activity reset
    checkActivityReset();
}

function saveData() {
    localStorage.setItem('userData', JSON.stringify(userData));
}

// Check if activities need to be reset (at 6:00 AM GMT+7)
function checkActivityReset() {
    const now = new Date();
    const today = now.toISOString().slice(0, 10);
    const lastResetDate = userData.lastResetDate || '';
    
    // Get current time in GMT+7
    const gmt7Hours = (now.getUTCHours() + 7) % 24;
    const gmt7Minutes = now.getUTCMinutes();
    
    // Check if it's 6:00 AM or later and we haven't reset today
    if (today !== lastResetDate && gmt7Hours >= 6) {
        // Save today's activities to history before reset
        const yesterday = new Date(now);
        yesterday.setDate(yesterday.getDate() - 1);
        const yesterdayStr = yesterday.toISOString().slice(0, 10);
        
        if (!userData.activityHistory[yesterdayStr]) {
            userData.activityHistory[yesterdayStr] = {};
        }
        
        // Save completed activities to history
        Object.keys(userData.completedActivities).forEach(activityId => {
            if (userData.completedActivities[activityId] === today) {
                userData.activityHistory[yesterdayStr][activityId] = true;
            }
        });
        
        // Check if user stayed under limit yesterday
        const yesterdayIndex = (yesterday.getDay() + 6) % 7; // Convert to 0=Mon, 1=Tue, ..., 6=Sun
        const yesterdayUsage = userData.weeklyData[yesterdayIndex] || 0;
        const userLimit = userData.limit || 60;
        
        if (yesterdayUsage <= userLimit) {
            // Increment under limit streak
            userData.underLimitStreak = (userData.underLimitStreak || 0) + 1;
            
            // Award badges based on streak
            if (userData.underLimitStreak >= 1) awardBadge('under_limit_1');
            if (userData.underLimitStreak >= 5) awardBadge('under_limit_5');
            if (userData.underLimitStreak >= 10) awardBadge('under_limit_10');
            if (userData.underLimitStreak >= 20) awardBadge('under_limit_20');
            
            showNotification("Th√†nh T·ª±u M·ªõi!", `B·∫°n ƒë√£ gi·ªØ th·ªùi gian s·ª≠ d·ª•ng d∆∞·ªõi gi·ªõi h·∫°n trong ${userData.underLimitStreak} ng√†y!`);
        } else {
            // Reset streak if over limit
            userData.underLimitStreak = 0;
        }
        
        // Reset completed activities
        userData.completedActivities = {};
        userData.lastResetDate = today;
        saveData();
        
        // Show notification
        showNotification("Reset Ho·∫°t ƒê·ªông", "Ho·∫°t ƒë·ªông l√†nh m·∫°nh ƒë√£ ƒë∆∞·ª£c reset cho ng√†y m·ªõi!");
    }
}

// Update countdown timer to 6:00 AM GMT+7
function updateCountdownTimer() {
    const now = new Date();
    
    // Get current time in GMT+7
    const gmt7Hours = (now.getUTCHours() + 7) % 24;
    const gmt7Minutes = now.getUTCMinutes();
    const gmt7Seconds = now.getUTCSeconds();
    
    // Calculate time until 6:00 AM GMT+7
    let hoursUntilReset = 0;
    let minutesUntilReset = 0;
    let secondsUntilReset = 0;
    
    if (gmt7Hours < 6) {
        // Current time is before 6:00 AM
        hoursUntilReset = 6 - gmt7Hours - 1;
        minutesUntilReset = 60 - gmt7Minutes - 1;
        secondsUntilReset = 60 - gmt7Seconds;
    } else {
        // Current time is after 6:00 AM, calculate until tomorrow
        hoursUntilReset = 24 - gmt7Hours + 6 - 1;
        minutesUntilReset = 60 - gmt7Minutes - 1;
        secondsUntilReset = 60 - gmt7Seconds;
    }
    
    // Format the time as HH:MM:SS
    const formattedTime = 
        String(hoursUntilReset).padStart(2, '0') + ':' +
        String(minutesUntilReset).padStart(2, '0') + ':' +
        String(secondsUntilReset).padStart(2, '0');
    
    const countdownElement = document.getElementById('countdown-timer');
    if (countdownElement) {
        countdownElement.textContent = formattedTime;
    }
}

// Start countdown timer
function startCountdownTimer() {
    // Update immediately
    updateCountdownTimer();
    
    // Update every second
    countdownInterval = setInterval(updateCountdownTimer, 1000);
}

// Format date as dd/mm/yyyy
function formatDate(date) {
    const day = String(date.getDate()).padStart(2, '0');
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const year = date.getFullYear();
    return `${day}/${month}/${year}`;
}

// Update activity history display
function updateActivityHistory() {
    const dateStr = currentHistoryDate.toISOString().slice(0, 10);
    const historyDateDisplay = document.getElementById('history-date-display');
    if (historyDateDisplay) {
        historyDateDisplay.textContent = formatDate(currentHistoryDate);
    }
    
    const allActivities = defaultHealthyActivities.concat(userData.customActivities || []);
    const completedActivities = userData.activityHistory[dateStr] || {};
    const activityHistoryContainer = document.getElementById('activity-history-container');
    
    if (activityHistoryContainer) {
        activityHistoryContainer.innerHTML = allActivities.map(activity => `
            <div class="flex items-center justify-between p-3 bg-white rounded-lg shadow-sm">
                <p class="text-gray-700">${activity.name}</p>
                <span class="px-4 py-1 rounded-full text-sm font-semibold 
                    ${completedActivities[activity.id] ? 'bg-green-500 text-white' : 'bg-gray-200 text-gray-700'}">
                    ${completedActivities[activity.id] ? 'ƒê√£ Xong' : 'Ch∆∞a l√†m'}
                </span>
            </div>
        `).join('');
    }
}

// Initialize app
function initApp() {
    const loadingSpinner = document.getElementById('loading-spinner');
    const mainContent = document.getElementById('main-content');
    const surveyContent = document.getElementById('survey-content');
    
    if (loadingSpinner) loadingSpinner.classList.add('hidden');
    if (mainContent) mainContent.classList.remove('hidden');
    if (surveyContent) surveyContent.classList.remove('hidden');

    if (document.getElementById('user-id-display')) {
        document.getElementById('user-id-display').textContent = userId;
        updateMainUI();
        startCountdownTimer();
    }
    
    if (document.getElementById('quiz-content')) {
        updateSurveyUI();
    }
}

// Update Main Page UI
function updateMainUI() {
    // Update dashboard
    const totalUsageToday = userData.weeklyData[todayIndex] || 0;
    const currentUsageDisplay = document.getElementById('current-usage-display');
    if(currentUsageDisplay) currentUsageDisplay.textContent = `${totalUsageToday}p`;
    
    const limit = userData.limit || 60;
    const limitInput = document.getElementById('limit-input');
    if(limitInput) limitInput.value = limit;
    
    const limitMessage = document.getElementById('limit-message');
    if(limitMessage) limitMessage.innerHTML = `Gi·ªõi h·∫°n: <strong>${limit}p</strong>`;

    const percentage = Math.min((totalUsageToday / limit) * 100, 100);
    const progressBar = document.getElementById('progress-bar');
    if(progressBar) progressBar.style.width = `${percentage}%`;

    if (totalUsageToday >= limit) {
        if(limitMessage) limitMessage.innerHTML = `<span class="font-bold text-red-300">B·∫°n ƒë√£ v∆∞·ª£t qu√° gi·ªõi h·∫°n!</span>`;
    } else if (totalUsageToday > 0) {
        if(limitMessage) limitMessage.innerHTML = `C√≤n l·∫°i: <strong>${Math.max(0, limit - totalUsageToday)}p</strong>`;
    }

    // Update app usage inputs
    const allApps = socialApps.concat(userData.customApps || []);
    const appInputContainer = document.getElementById('app-input-container');
    if(appInputContainer) {
        appInputContainer.innerHTML = allApps.map(app => `
            <div class="input-group">
                <div class="app-icon" style="background-color: ${app.color || '#ccc'}">
                    <i class="${app.iconClass || 'fa-solid fa-plus'}"></i>
                </div>
                <input type="number" id="input-${app.id}" placeholder="${app.name} (ph√∫t)" value="${(userData.appUsage[app.id] && userData.appUsage[app.id][todayIndex]) || 0}" class="flex-grow rounded-lg px-4 py-2 text-gray-800 focus:outline-none focus:ring-2 focus:ring-indigo-400">
            </div>
        `).join('');
    }

    // Update activities
    const allActivities = defaultHealthyActivities.concat(userData.customActivities || []);
    const healthyActivitiesList = document.getElementById('healthy-activities-list');
    if(healthyActivitiesList) {
        healthyActivitiesList.innerHTML = allActivities.map(activity => `
            <div class="flex items-center justify-between p-3 bg-white rounded-lg shadow-sm">
                <p class="text-gray-700">${activity.name}</p>
                <button id="activity-${activity.id}" data-id="${activity.id}" class="complete-activity-btn px-4 py-1 rounded-full text-sm font-semibold transition duration-300
                    ${userData.completedActivities[activity.id] ? 'bg-green-500 text-white cursor-not-allowed' : 'bg-indigo-200 text-indigo-700 hover:bg-indigo-300'}">
                    ${userData.completedActivities[activity.id] ? 'ƒê√£ Xong' : 'Ho√†n Th√†nh'}
                </button>
            </div>
        `).join('');
    }

    // Update badges
    const badgesGrid = document.getElementById('badges-grid');
    if(badgesGrid) {
        badgesGrid.innerHTML = allBadges.map(badge => `
            <div class="flex flex-col items-center space-y-2 p-3 rounded-xl bg-white shadow-sm transition-all transform hover:scale-105">
                <span class="text-4xl ${userData.badges[badge.id] ? 'badge-earned' : 'badge-icon'}">${badge.icon}</span>
                <p class="font-semibold text-center text-sm">${badge.name}</p>
                <p class="text-xs text-center text-gray-500">${badge.description}</p>
            </div>
        `).join('');
    }
   
    // Update charts
    updateCharts();
    
    // Update activity history
    updateActivityHistory();
}

// Update Survey Page UI
function updateSurveyUI() {
    // Nothing specific to initialize on survey page load
}

// Update Charts
function updateCharts() {
    const appUsageChartCtx = document.getElementById('app-usage-chart')?.getContext('2d');
    if (!appUsageChartCtx) return; // Exit if chart canvas is not on the page

    const appLabels = socialApps.map(app => app.name);
    const appColors = socialApps.map(app => app.color);
    const appData = socialApps.map(app => (userData.appUsage[app.id] || Array(7).fill(0)));

    const datasets = appData.map((data, index) => ({
        label: appLabels[index],
        data: data,
        borderColor: appColors[index],
        backgroundColor: 'transparent',
        borderWidth: 2,
        fill: false,
        tension: 0.4,
        pointRadius: 5
    }));

    // Line chart for individual app usage
    if (window.appUsageChart) window.appUsageChart.destroy();
    window.appUsageChart = new Chart(appUsageChartCtx, {
        type: 'line',
        data: {
            labels: ['T2', 'T3', 'T4', 'T5', 'T6', 'CN', 'T7'].sort(),
            datasets: datasets
        },
        options: {
            responsive: true,
            plugins: {
                legend: { position: 'top' },
                tooltip: { mode: 'index', intersect: false }
            },
            scales: { y: { beginAtZero: true } }
        }
    });

    // Bar chart for total weekly usage
    const weeklyUsageChartCtx = document.getElementById('weekly-usage-chart')?.getContext('2d');
    if (!weeklyUsageChartCtx) return;

    if (window.weeklyUsageChart) window.weeklyUsageChart.destroy();
    const limitData = Array(7).fill(userData.limit || 60);
    window.weeklyUsageChart = new Chart(weeklyUsageChartCtx, {
        type: 'bar',
        data: {
            labels: ['T2', 'T3', 'T4', 'T5', 'T6', 'CN', 'T7'].sort(),
            datasets: [
                {
                    label: 'Th·ªùi gian s·ª≠ d·ª•ng',
                    data: userData.weeklyData,
                    backgroundColor: '#6366f1',
                },
                {
                    label: 'Gi·ªõi h·∫°n',
                    data: limitData,
                    type: 'line',
                    borderColor: '#ef4444',
                    borderWidth: 2,
                    fill: false,
                    tension: 0.1,
                    pointRadius: 0
                }
            ]
        },
        options: {
            responsive: true,
            plugins: {
                legend: { position: 'top' },
                tooltip: { mode: 'index', intersect: false }
            },
            scales: {
                y: { beginAtZero: true },
                x: { stacked: false }
            }
        }
    });
   
    // Quiz history chart
    const quizHistoryChartCtx = document.getElementById('quiz-history-chart')?.getContext('2d');
    if (quizHistoryChartCtx) {
        if (window.quizHistoryChart) window.quizHistoryChart.destroy();
        const historyLabels = userData.quizHistory.map((entry, index) => `L·∫ßn ${index + 1}`);
        const physicalData = userData.quizHistory.map(entry => entry.scores.physical);
        const mentalData = userData.quizHistory.map(entry => entry.scores.mental);
        const concentrationData = userData.quizHistory.map(entry => entry.scores.concentration);

        window.quizHistoryChart = new Chart(quizHistoryChartCtx, {
            type: 'line',
            data: {
                labels: historyLabels,
                datasets: [
                    { label: 'Th·ªÉ ch·∫•t', data: physicalData, borderColor: '#4c51bf', fill: false, tension: 0.4 },
                    { label: 'Tinh th·∫ßn', data: mentalData, borderColor: '#6b46c1', fill: false, tension: 0.4 },
                    { label: 'T·∫≠p trung', data: concentrationData, borderColor: '#f56565', fill: false, tension: 0.4 }
                ]
            },
            options: {
                responsive: true,
                // ƒê√É S·ª¨A: C·∫≠p nh·∫≠t suggestedMax cho bi·ªÉu ƒë·ªì l·ªãch s·ª≠ kh·∫£o s√°t
                scales: { y: { beginAtZero: true, suggestedMax: 20 } } // ƒê·ªïi 25 th√†nh 20
            }
        });
    }
}

// Show notification
function showNotification(title, message) {
    const notification = document.createElement('div');
    notification.className = 'notification-card bg-white p-4 rounded-xl shadow-lg flex items-center space-x-3 w-full max-w-sm fixed top-4 right-4 z-50 transform transition-all duration-500 translate-x-full';
    notification.innerHTML = `
        <div class="flex-shrink-0">
            <svg class="h-6 w-6 text-indigo-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856a2 2 0 001.912-2.316L17.726 5.86a2 2 0 00-1.912-1.684H8.186a2 2 0 00-1.912 1.684L4.02 17.684A2 2 0 006.012 20h11.976z" />
            </svg>
        </div>
        <div>
            <div class="font-bold text-gray-900">${title}</div>
            <div class="text-sm text-gray-600">${message}</div>
        </div>
    `;
    document.body.appendChild(notification);
    
    // Animate in
    setTimeout(() => {
        notification.classList.remove('translate-x-full');
    }, 100);
    
    // Remove after 5 seconds
    setTimeout(() => {
        notification.classList.add('translate-x-full');
        setTimeout(() => {
            notification.remove();
        }, 500);
    }, 5000);
}

// Award badge
function awardBadge(badgeId) {
    if (!userData.badges[badgeId]) {
        userData.badges[badgeId] = true;
        saveData();
        showNotification("Th√†nh T·ª±u M·ªõi!", `B·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c huy hi·ªáu "${allBadges.find(b => b.id === badgeId).name}"!`);
    }
}

// ƒê√É S·ª¨A: C·∫≠p nh·∫≠t to√†n b·ªô h√†m ƒë√°nh gi√° v·ªõi thang ƒëi·ªÉm v√† c√¥ng th·ª©c m·ªõi
function getQuizResultEvaluation(scores) {
    const { physical, mental, concentration } = scores;
    
    // ƒê√É S·ª¨A: C·∫≠p nh·∫≠t c√¥ng th·ª©c t√≠nh ph·∫ßn trƒÉm
    const totalScore = physical + mental + concentration;
    const finalDependencyPercentage = (totalScore / 60) * 100; // ƒê·ªïi 75 th√†nh 60
    const formattedDependencyPercentage = finalDependencyPercentage.toFixed(2);
   
    let evaluationDetails = `
        <p><strong>ƒêi·ªÉm ph·ª• thu·ªôc m·∫°ng x√£ h·ªôi c·ªßa b·∫°n l√† <span class="text-indigo-600 font-bold">${formattedDependencyPercentage}%</span>.</strong> ƒê·ªÉ hi·ªÉu r√µ h∆°n v·ªÅ con s·ªë n√†y, ch√∫ng ta h√£y c√πng ph√¢n t√≠ch chi ti·∫øt k·∫øt qu·∫£ c·ªßa b·∫°n ·ªü t·ª´ng kh√≠a c·∫°nh.</p>
        <div class="p-4 bg-white rounded-lg shadow-inner">
            <h5 class="font-bold text-lg mb-2">Ph·∫ßn 1: Ph√¢n t√≠ch chi ti·∫øt t·ª´ng kh√≠a c·∫°nh</h5>
            
            <h6 class="font-semibold text-md mb-2">S·ª©c kh·ªèe Th·ªÉ ch·∫•t (Physical)</h6>
            ${physical < 7 ? ` <!-- ƒê√É S·ª¨A: C·∫≠p nh·∫≠t ng∆∞·ª°ng -->
            <p class="mb-1">üü¢ <strong>M·ª©c ƒë·ªô: ƒêang ·ªü m·ª©c t·ªët</strong> (ƒêi·ªÉm: ${20 - physical}/20)</p> <!-- ƒê√É S·ª¨A: C·∫≠p nh·∫≠t ƒëi·ªÉm t·ªëi ƒëa -->
            <p class="text-sm pl-4 mb-2 text-gray-600">B·∫°n ƒëang duy tr√¨ ƒë∆∞·ª£c m·ªôt n·ªÅn t·∫£ng th·ªÉ ch·∫•t ·ªïn ƒë·ªãnh. C√°c bi·ªÉu hi·ªán ti√™u c·ª±c nh∆∞ ƒëau ƒë·∫ßu, m·ªèi m·∫Øt hay r·ªëi lo·∫°n gi·∫•c ng·ªß do s·ª≠ d·ª•ng thi·∫øt b·ªã ƒëi·ªán t·ª≠ d∆∞·ªùng nh∆∞ kh√¥ng ƒë√°ng k·ªÉ. ƒêi·ªÅu n√†y ch·ª©ng t·ªè b·∫°n ƒë√£ h√¨nh th√†nh th√≥i quen c√¢n b·∫±ng gi·ªØa th·ªùi gian tr∆∞·ªõc m√†n h√¨nh v√† ho·∫°t ƒë·ªông th·ªÉ ch·∫•t, gi√∫p c∆° th·ªÉ c√≥ th·ªùi gian ph·ª•c h·ªìi nƒÉng l∆∞·ª£ng.<br>ƒê√¢y l√† minh ch·ª©ng cho s·ª± t·ª± ƒëi·ªÅu ch·ªânh h√†nh vi s·ª≠ d·ª•ng c√¥ng ngh·ªá ‚Äì m·ªôt y·∫øu t·ªë quan tr·ªçng trong vi·ªác gi·∫£m thi·ªÉu ·∫£nh h∆∞·ªüng c·ªßa ‚Äúdopamine loop‚Äù (v√≤ng l·∫∑p dopamine) t·ª´ c√°c n·ªÅn t·∫£ng m·∫°ng x√£ h·ªôi.</p>
            ` : (physical < 15 ? ` <!-- ƒê√É S·ª¨A: C·∫≠p nh·∫≠t ng∆∞·ª°ng -->
            <p class="mb-1">üü° <strong>M·ª©c ƒë·ªô: C·∫ßn c·∫£i thi·ªán</strong> (ƒêi·ªÉm: ${20 - physical}/20)</p> <!-- ƒê√É S·ª¨A: C·∫≠p nh·∫≠t ƒëi·ªÉm t·ªëi ƒëa -->
            <p class="text-sm pl-4 mb-2 text-gray-600">S·ª©c kh·ªèe th·ªÉ ch·∫•t c·ªßa b·∫°n ƒëang c√≥ d·∫•u hi·ªáu gi·∫£m nh·∫π do t√°c ƒë·ªông t·ª´ vi·ªác s·ª≠ d·ª•ng m·∫°ng x√£ h·ªôi. C√°c tri·ªáu ch·ª©ng nh∆∞ m·ªèi m·∫Øt, cƒÉng c·ªï, ho·∫∑c r·ªëi lo·∫°n gi·∫•c ng·ªß c√≥ th·ªÉ ƒëang xu·∫•t hi·ªán nh∆∞ng ch∆∞a nghi√™m tr·ªçng. C∆° th·ªÉ b·∫°n ƒëang g·ª≠i t√≠n hi·ªáu c·∫£nh b√°o v·ªÅ s·ª± qu√° t·∫£i c·∫£m gi√°c.<br>H√£y thi·∫øt l·∫≠p ‚Äúchu k·ª≥ ngh·ªâ k·ªπ thu·∫≠t s·ªë‚Äù ‚Äì c·ª© sau m·ªói 20 ph√∫t s·ª≠ d·ª•ng, h√£y nh√¨n xa 20 gi√¢y (quy t·∫Øc 20-20-20), gi√£n c∆° c·ªï, v√† h·∫°n ch·∫ø √°nh s√°ng xanh v√†o ban ƒë√™m. Vi·ªác n√†y gi√∫p h·ªá th·∫ßn kinh th·ªã gi√°c v√† c∆° x∆∞∆°ng ƒë∆∞·ª£c t√°i t·∫°o nh·ªãp sinh h·ªçc t·ª± nhi√™n.</p>
            ` : `
            <p class="mb-1">üî¥ <strong>M·ª©c ƒë·ªô: ƒêang c√≥ v·∫•n ƒë·ªÅ</strong> (ƒêi·ªÉm: ${20 - physical}/20)</p> <!-- ƒê√É S·ª¨A: C·∫≠p nh·∫≠t ƒëi·ªÉm t·ªëi ƒëa -->
            <p class="text-sm pl-4 mb-2 text-gray-600">ƒêi·ªÉm s·ªë th·∫•p cho th·∫•y s·ª©c kh·ªèe th·ªÉ ch·∫•t c·ªßa b·∫°n ƒëang b·ªã t·ªïn h·∫°i r√µ r·ªát. T√¨nh tr·∫°ng m·ªát m·ªèi, gi·∫£m th·ªã l·ª±c, ƒëau c∆° ho·∫∑c m·∫•t ng·ªß c√≥ th·ªÉ l√† h·ªá qu·∫£ c·ªßa vi·ªác ti·∫øp x√∫c li√™n t·ª•c v·ªõi k√≠ch th√≠ch s·ªë m√† kh√¥ng c√≥ giai ƒëo·∫°n ph·ª•c h·ªìi.<br>Khi c∆° th·ªÉ r∆°i v√†o tr·∫°ng th√°i n√†y, n√£o b·ªô s·∫Ω ti·∫øt dopamine li√™n t·ª•c ƒë·ªÉ duy tr√¨ c·∫£m gi√°c ‚Äúho·∫°t ƒë·ªông‚Äù, d·∫´n ƒë·∫øn m·ªát m·ªèi m√£n t√≠nh v√† suy gi·∫£m th·ªÉ l·ª±c. ƒê√¢y l√† th·ªùi ƒëi·ªÉm b·∫°n c·∫ßn thi·∫øt l·∫≠p gi·ªõi h·∫°n c√¥ng ngh·ªá c√° nh√¢n: gi·∫£m th·ªùi gian d√πng m·∫°ng, tƒÉng v·∫≠n ƒë·ªông th·ªÉ ch·∫•t v√† ∆∞u ti√™n gi·∫•c ng·ªß ch·∫•t l∆∞·ª£ng ƒë·ªÉ kh√¥i ph·ª•c tr·∫°ng th√°i c√¢n b·∫±ng sinh h·ªçc.</p>
            `)}

            <h6 class="font-semibold text-md mb-2 mt-4">S·ª©c kh·ªèe Tinh th·∫ßn (Mental)</h6>
            ${mental < 7 ? ` <!-- ƒê√É S·ª¨A: C·∫≠p nh·∫≠t ng∆∞·ª°ng -->
            <p class="mb-1">üü¢ <strong>M·ª©c ƒë·ªô: R·∫•t ·ªïn ƒë·ªãnh</strong> (ƒêi·ªÉm: ${20 - mental}/20)</p> <!-- ƒê√É S·ª¨A: C·∫≠p nh·∫≠t ƒëi·ªÉm t·ªëi ƒëa -->
            <p class="text-sm pl-4 mb-2 text-gray-600">B·∫°n ƒëang s·ªü h·ªØu m·ªôt tr·∫°ng th√°i t√¢m l√Ω v·ªØng v√†ng. B·∫°n √≠t b·ªã chi ph·ªëi b·ªüi hi·ªáu ·ª©ng ‚Äúso s√°nh x√£ h·ªôi‚Äù (social comparison effect) v√† kh√¥ng qu√° lo l·∫Øng khi kh√¥ng c·∫≠p nh·∫≠t xu h∆∞·ªõng m·ªõi. ƒêi·ªÅu n√†y cho th·∫•y b·∫°n ƒë√£ x√¢y d·ª±ng ƒë∆∞·ª£c h√†ng r√†o nh·∫≠n th·ª©c v·ªØng ch·∫Øc tr∆∞·ªõc c√°c k√≠ch th√≠ch c·∫£m x√∫c t·ª´ m·∫°ng x√£ h·ªôi ‚Äì y·∫øu t·ªë n·ªÅn t·∫£ng gi√∫p duy tr√¨ c·∫£m x√∫c t√≠ch c·ª±c v√† l√≤ng t·ª± tr·ªçng ·ªïn ƒë·ªãnh.<br>ƒê√¢y l√† d·∫•u hi·ªáu c·ªßa s·ª©c kh·ªèe tinh th·∫ßn k·ªπ thu·∫≠t s·ªë (digital mental wellness), gi√∫p b·∫°n s·ª≠ d·ª•ng c√¥ng ngh·ªá nh∆∞ c√¥ng c·ª• ph·ª•c v·ª• cu·ªôc s·ªëng, ch·ª© kh√¥ng ph·∫£i ƒë·ªÉ x√°c ƒë·ªãnh gi√° tr·ªã b·∫£n th√¢n.</p>
            ` : (mental < 15 ? ` <!-- ƒê√É S·ª¨A: C·∫≠p nh·∫≠t ng∆∞·ª°ng -->
            <p class="mb-1">üü° <strong>M·ª©c ƒë·ªô: C·∫ßn ƒë∆∞·ª£c quan t√¢m</strong> (ƒêi·ªÉm: ${20 - mental}/20)</p> <!-- ƒê√É S·ª¨A: C·∫≠p nh·∫≠t ƒëi·ªÉm t·ªëi ƒëa -->
            <p class="text-sm pl-4 mb-2 text-gray-600">S·ª©c kh·ªèe tinh th·∫ßn c·ªßa b·∫°n ƒëang ·ªü m·ª©c d·ªÖ b·ªã dao ƒë·ªông. Vi·ªác lo l·∫Øng khi b·ªã ‚Äúb·ªè l·ª°‚Äù (FOMO) ho·∫∑c c·∫£m th·∫•y √°p l·ª±c khi ph·∫£i th·ªÉ hi·ªán b·∫£n th√¢n tr√™n m·∫°ng cho th·∫•y dopamine t·ª´ c√°c t∆∞∆°ng t√°c ·∫£o ƒëang ·∫£nh h∆∞·ªüng ƒë·∫øn v√πng c·∫£m x√∫c c·ªßa n√£o b·ªô.<br>B·∫°n n√™n d√†nh th·ªùi gian t√°ch kh·ªèi m√¥i tr∆∞·ªùng m·∫°ng, vi·∫øt nh·∫≠t k√Ω c·∫£m x√∫c, ho·∫∑c tham gia c√°c ho·∫°t ƒë·ªông mang t√≠nh k·∫øt n·ªëi th·∫≠t nh∆∞ tr√≤ chuy·ªán, ƒë·ªçc s√°ch, ho·∫∑c h·ªçc k·ªπ nƒÉng m·ªõi. Nh·ªØng ho·∫°t ƒë·ªông n√†y gi√∫p t√°i c√¢n b·∫±ng h·ªá dopamine v√† c·ªßng c·ªë c·∫£m x√∫c t·ª± nhi√™n thay v√¨ ph·ª• thu·ªôc v√†o ph·∫£n h·ªìi ·∫£o.</p>
            ` : `
            <p class="mb-1">üî¥ <strong>M·ª©c ƒë·ªô: ƒêang b·ªã ·∫£nh h∆∞·ªüng nghi√™m tr·ªçng</strong> (ƒêi·ªÉm: ${20 - mental}/20)</p> <!-- ƒê√É S·ª¨A: C·∫≠p nh·∫≠t ƒëi·ªÉm t·ªëi ƒëa -->
            <p class="text-sm pl-4 mb-2 text-gray-600">ƒêi·ªÉm s·ªë n√†y cho th·∫•y b·∫°n ƒëang tr·∫£i qua m·ª©c ƒë·ªô cƒÉng th·∫≥ng ho·∫∑c lo √¢u cao li√™n quan ƒë·∫øn vi·ªác s·ª≠ d·ª•ng m·∫°ng x√£ h·ªôi. C·∫£m gi√°c tr·ªëng r·ªóng, m·∫•t t·∫≠p trung, ho·∫∑c s·ª£ b·ªã l√£ng qu√™n l√† d·∫•u hi·ªáu c·ªßa dopamine burnout ‚Äì khi n√£o ƒë√£ quen v·ªõi vi·ªác ƒë∆∞·ª£c k√≠ch th√≠ch li√™n t·ª•c.<br>L√∫c n√†y, ƒëi·ªÅu c·∫ßn thi·∫øt l√† can thi·ªáp c·∫£m x√∫c t√≠ch c·ª±c: h·∫°n ch·∫ø ti·∫øp x√∫c n·ªôi dung ti√™u c·ª±c, n√≥i chuy·ªán v·ªõi ng∆∞·ªùi th√¢n ho·∫∑c t√¨m ƒë·∫øn chuy√™n gia t√¢m l√Ω ƒë·ªÉ ƒë∆∞·ª£c h∆∞·ªõng d·∫´n c√°ch t√°i t·∫°o nƒÉng l∆∞·ª£ng tinh th·∫ßn v√† tho√°t kh·ªèi s·ª± ph·ª• thu·ªôc c·∫£m x√∫c v√†o m√¥i tr∆∞·ªùng ·∫£o.</p>
            `)}

            <h6 class="font-semibold text-md mb-2 mt-4">M·ª©c ƒë·ªô T·∫≠p trung (Concentration)</h6>
            ${concentration < 7 ? ` <!-- ƒê√É S·ª¨A: C·∫≠p nh·∫≠t ng∆∞·ª°ng -->
            <p class="mb-1">üü¢ <strong>M·ª©c ƒë·ªô: R·∫•t t·ªët</strong> (ƒêi·ªÉm: ${20 - concentration}/20)</p> <!-- ƒê√É S·ª¨A: C·∫≠p nh·∫≠t ƒëi·ªÉm t·ªëi ƒëa -->
            <p class="text-sm pl-4 mb-2 text-gray-600">B·∫°n c√≥ kh·∫£ nƒÉng duy tr√¨ s·ª± t·∫≠p trung b·ªÅn v·ªØng, ph·∫£n √°nh vi·ªác n√£o b·ªô ho·∫°t ƒë·ªông ·ªü tr·∫°ng th√°i ki·ªÉm so√°t ch·ª© kh√¥ng b·ªã cu·ªën v√†o d√≤ng ch·∫£y th√¥ng tin li√™n t·ª•c. ƒê√¢y l√† m·ªôt d·∫•u hi·ªáu ƒë√°ng qu√Ω trong th·ªùi ƒë·∫°i k·ªπ thu·∫≠t s·ªë, cho th·∫•y b·∫°n ƒëang s·ª≠ d·ª•ng dopamine m·ªôt c√°ch c√≥ √Ω th·ª©c ‚Äì ch·ªâ k√≠ch ho·∫°t khi c·∫ßn thi·∫øt cho h·ªçc t·∫≠p v√† c√¥ng vi·ªác.<br>H√£y ti·∫øp t·ª•c ph√°t huy b·∫±ng c√°ch duy tr√¨ kho·∫£ng th·ªùi gian ‚Äúdeep work‚Äù (l√†m vi·ªác s√¢u), n∆°i b·∫°n lo·∫°i b·ªè ho√†n to√†n th√¥ng b√°o v√† t·∫≠p trung tuy·ªát ƒë·ªëi v√†o m·ªôt nhi·ªám v·ª•.</p>
            ` : (concentration < 15 ? ` <!-- ƒê√É S·ª¨A: C·∫≠p nh·∫≠t ng∆∞·ª°ng -->
            <p class="mb-1">üü° <strong>M·ª©c ƒë·ªô: C·∫ßn r√®n luy·ªán th√™m</strong> (ƒêi·ªÉm: ${20 - concentration}/20)</p> <!-- ƒê√É S·ª¨A: C·∫≠p nh·∫≠t ƒëi·ªÉm t·ªëi ƒëa -->
            <p class="text-sm pl-4 mb-2 text-gray-600">B·∫°n c√≥ kh·∫£ nƒÉng t·∫≠p trung ·ªü m·ª©c ch·∫•p nh·∫≠n ƒë∆∞·ª£c, nh∆∞ng v·∫´n d·ªÖ b·ªã gi√°n ƒëo·∫°n b·ªüi c√°c t√≠n hi·ªáu s·ªë nh∆∞ th√¥ng b√°o, tin nh·∫Øn ho·∫∑c video ng·∫Øn. ƒêi·ªÅu n√†y l√† bi·ªÉu hi·ªán c·ªßa n√£o b·ªô ƒëang b·ªã t√°i hu·∫•n luy·ªán sai c√°ch ‚Äì th∆∞·ªùng xuy√™n chuy·ªÉn ƒë·ªïi nhi·ªám v·ª•, khi·∫øn kh·∫£ nƒÉng duy tr√¨ s·ª± ch√∫ √Ω gi·∫£m.<br>H√£y th·ª≠ ph∆∞∆°ng ph√°p Pomodoro (l√†m vi·ªác 25 ph√∫t, ngh·ªâ 5 ph√∫t), ƒë·ªìng th·ªùi t·∫Øt to√†n b·ªô th√¥ng b√°o kh√¥ng c·∫ßn thi·∫øt ƒë·ªÉ n√£o b·ªô t√°i l·∫≠p kh·∫£ nƒÉng t·∫≠p trung t·ª± nhi√™n.</p>
            ` : `
            <p class="mb-1">üî¥ <strong>M·ª©c ƒë·ªô: ƒêang r·∫•t th·∫•p</strong> (ƒêi·ªÉm: ${20 - concentration}/20)</p> <!-- ƒê√É S·ª¨A: C·∫≠p nh·∫≠t ƒëi·ªÉm t·ªëi ƒëa -->
            <p class="text-sm pl-4 mb-2 text-gray-600">ƒêi·ªÉm th·∫•p cho th·∫•y kh·∫£ nƒÉng ki·ªÉm so√°t ch√∫ √Ω ƒëang b·ªã r·ªëi lo·∫°n nghi√™m tr·ªçng, th∆∞·ªùng ƒëi k√®m v·ªõi vi·ªác li√™n t·ª•c chuy·ªÉn ƒë·ªïi gi·ªØa c√°c ·ª©ng d·ª•ng v√† n·ªôi dung. ƒê√¢y l√† d·∫•u hi·ªáu c·ªßa digital distraction syndrome ‚Äì h·ªôi ch·ª©ng ph√¢n t√°n ch√∫ √Ω do s·ª≠ d·ª•ng m·∫°ng x√£ h·ªôi qu√° m·ª©c.<br>H√£y b·∫Øt ƒë·∫ßu b·∫±ng vi·ªác thi·∫øt l·∫≠p v√πng kh√¥ng c√¥ng ngh·ªá (no-screen zone) trong ng√†y, v√≠ d·ª• nh∆∞ 30 ph√∫t sau khi th·ª©c d·∫≠y ho·∫∑c tr∆∞·ªõc khi ƒëi ng·ªß. Khi n√£o b·ªô d·∫ßn quen v·ªõi ‚Äúkho·∫£ng l·∫∑ng th√¥ng tin‚Äù, m·ª©c dopamine s·∫Ω ·ªïn ƒë·ªãnh v√† kh·∫£ nƒÉng t·∫≠p trung s·∫Ω ƒë∆∞·ª£c ph·ª•c h·ªìi.</p>
            `)}
        </div>
        
        <div class="p-4 bg-white rounded-lg shadow-inner mt-4">
            <h5 class="font-bold text-lg mb-2">Ph·∫ßn 2: L·ªùi khuy√™n T·ªïng th·ªÉ</h5>
            ${finalDependencyPercentage <= 30 ? ` <!-- Gi·ªØ nguy√™n ng∆∞·ª°ng ph·∫ßn trƒÉm -->
            <p class="mb-1">üü¢ <strong>M·ª©c ƒë·ªô ph·ª• thu·ªôc th·∫•p</strong></p>
            <p class="text-sm pl-4 text-gray-600">B·∫°n ƒëang l√†m r·∫•t t·ªët. ƒêi·ªÉm s·ªë cao th·ªÉ hi·ªán b·∫°n ƒë√£ ƒë·∫°t ƒë·∫øn tr·∫°ng th√°i t·ª± ch·ªß k·ªπ thu·∫≠t s·ªë ‚Äì s·ª≠ d·ª•ng c√¥ng ngh·ªá nh∆∞ c√¥ng c·ª• h·ªó tr·ª£, kh√¥ng ph·∫£i ngu·ªìn dopamine ch√≠nh.<br>H√£y duy tr√¨ th√≥i quen l√†nh m·∫°nh n√†y b·∫±ng c√°ch th∆∞·ªùng xuy√™n ‚Äúdetox th√¥ng tin‚Äù: t·∫°m r·ªùi xa m·∫°ng x√£ h·ªôi 1 ng√†y m·ªói tu·∫ßn, d√†nh th·ªùi gian cho thi√™n nhi√™n, s√°ng t·∫°o, v√† t∆∞∆°ng t√°c th·∫≠t. ƒê√¢y l√† c√°ch t·ªët nh·∫•t ƒë·ªÉ duy tr√¨ s·ª± t·ª± do tinh th·∫ßn trong k·ª∑ nguy√™n s·ªë.</p>
            ` : (finalDependencyPercentage <= 60 ? ` <!-- Gi·ªØ nguy√™n ng∆∞·ª°ng ph·∫ßn trƒÉm -->
            <p class="mb-1">üü° <strong>M·ª©c ƒë·ªô ph·ª• thu·ªôc trung b√¨nh</strong></p>
            <p class="text-sm pl-4 text-gray-600">B·∫°n ƒëang ·ªü giai ƒëo·∫°n chuy·ªÉn ti·∫øp gi·ªØa th√≥i quen v√† nh·∫≠n th·ª©c. M·ª©c ƒë·ªô ph·ª• thu·ªôc ·ªü m·ª©c v·ª´a ph·∫£i, cho th·∫•y b·∫°n ƒë√£ b·∫Øt ƒë·∫ßu ki·ªÉm so√°t ƒë∆∞·ª£c th√≥i quen, nh∆∞ng ƒë√¥i khi v·∫´n ƒë·ªÉ m·∫°ng x√£ h·ªôi ·∫£nh h∆∞·ªüng c·∫£m x√∫c.<br>H√£y x√¢y d·ª±ng l·ªãch s·ª≠ d·ª•ng m·∫°ng c√≥ m·ª•c ƒë√≠ch: ch·ªâ truy c·∫≠p khi c·∫ßn, gi·ªõi h·∫°n th·ªùi gian, v√† ∆∞u ti√™n ho·∫°t ƒë·ªông ngo·∫°i tuy·∫øn. Vi·ªác n√†y gi√∫p n√£o b·ªô t√°i h·ªçc c√°ch t√¨m ni·ªÅm vui t·ª´ th·∫ø gi·ªõi th·∫≠t.</p>
            ` : `
            <p class="mb-1">üî¥ <strong>M·ª©c ƒë·ªô ph·ª• thu·ªôc cao</strong></p>
            <p class="text-sm pl-4 text-gray-600">ƒêi·ªÉm s·ªë cho th·∫•y m·∫°ng x√£ h·ªôi ƒëang chi ph·ªëi ƒë√°ng k·ªÉ h√†nh vi v√† c·∫£m x√∫c c·ªßa b·∫°n. D√π b·∫°n c√≥ th·ªÉ v·∫´n duy tr√¨ s·ª©c kh·ªèe t·ªët, nh∆∞ng n√£o b·ªô ƒë√£ quen v·ªõi vi·ªác t√¨m ki·∫øm k√≠ch th√≠ch t·ª©c th·ªùi.<br>H√£y b·∫Øt ƒë·∫ßu b·∫±ng vi·ªác gi·∫£m 10% th·ªùi gian s·ª≠ d·ª•ng m·ªói tu·∫ßn, thay th·∫ø b·∫±ng c√°c ho·∫°t ƒë·ªông mang l·∫°i dopamine t·ª± nhi√™n: v·∫≠n ƒë·ªông, nghe nh·∫°c, ƒë·ªçc s√°ch ho·∫∑c giao ti·∫øp th·∫≠t. ƒê√¢y l√† b∆∞·ªõc ƒë·∫ßu c·ªßa dopamine detox c√≥ ki·ªÉm so√°t, gi√∫p kh√¥i ph·ª•c kh·∫£ nƒÉng t·∫≠p trung v√† s·ª± t·ª± ch·ªß.</p>
            `)}
        </div>
    `;
   
    return {
        evaluationDetails,
        dependencyPercentage: finalDependencyPercentage, 
        finalAdvice: ''
    };
}

// Pomodoro Timer Functions
function formatTime(seconds) {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    return `${String(minutes).padStart(2, '0')}:${String(remainingSeconds).padStart(2, '0')}`;
}

function playBellSound() {
    const audioCtx = new (window.AudioContext || window.webkitAudioContext)();
    const oscillator = audioCtx.createOscillator();
    const gainNode = audioCtx.createGain();

    oscillator.type = 'sine';
    oscillator.frequency.value = 440; // A4
    gainNode.gain.setValueAtTime(0, audioCtx.currentTime);
    gainNode.gain.linearRampToValueAtTime(0.5, audioCtx.currentTime + 0.1);
    gainNode.gain.linearRampToValueAtTime(0, audioCtx.currentTime + 1);

    oscillator.connect(gainNode);
    gainNode.connect(audioCtx.destination);
    oscillator.start();
    oscillator.stop(audioCtx.currentTime + 1);
}

function startTimer() {
    pomodoro.isRunning = true;
    const startPauseBtn = document.getElementById('start-pause-btn');
    if(startPauseBtn) {
        startPauseBtn.textContent = 'T·∫°m D·ª´ng';
        startPauseBtn.classList.remove('bg-green-500', 'hover:bg-green-600');
        startPauseBtn.classList.add('bg-yellow-500', 'hover:bg-yellow-600');
    }
    const resetBtn = document.getElementById('reset-btn');
    if(resetBtn) resetBtn.classList.remove('hidden');

    pomodoro.intervalId = setInterval(() => {
        pomodoro.timeRemaining--;
        const timerDisplay = document.getElementById('timer-display');
        if(timerDisplay) timerDisplay.textContent = formatTime(pomodoro.timeRemaining);

        if (pomodoro.timeRemaining <= 0) {
            playBellSound();
            const timerStatus = document.getElementById('timer-status');
            if (pomodoro.isWorkTime) {
                pomodoro.isWorkTime = false;
                pomodoro.timeRemaining = pomodoro.breakDuration;
                if(timerStatus) timerStatus.textContent = 'Gi·ªù ngh·ªâ!';
            } else {
                pomodoro.isWorkTime = true;
                pomodoro.timeRemaining = pomodoro.workDuration;
                if(timerStatus) timerStatus.textContent = 'B·∫Øt ƒë·∫ßu m·ªôt chu k·ª≥ m·ªõi!';
            }
            if(timerDisplay) timerDisplay.textContent = formatTime(pomodoro.timeRemaining);
        }
    }, 1000);
}

function pauseTimer() {
    pomodoro.isRunning = false;
    const startPauseBtn = document.getElementById('start-pause-btn');
    if(startPauseBtn) {
        startPauseBtn.textContent = 'Ti·∫øp T·ª•c';
        startPauseBtn.classList.remove('bg-yellow-500', 'hover:bg-yellow-600');
        startPauseBtn.classList.add('bg-green-500', 'hover:bg-green-600');
    }
    clearInterval(pomodoro.intervalId);
}

function resetTimer() {
    pauseTimer();
    pomodoro.isWorkTime = true;
    pomodoro.timeRemaining = pomodoro.workDuration;
    const timerDisplay = document.getElementById('timer-display');
    const timerStatus = document.getElementById('timer-status');
    const startPauseBtn = document.getElementById('start-pause-btn');
    const resetBtn = document.getElementById('reset-btn');

    if(timerDisplay) timerDisplay.textContent = formatTime(pomodoro.workDuration);
    if(timerStatus) timerStatus.textContent = 'S·∫µn s√†ng b·∫Øt ƒë·∫ßu!';
    if(startPauseBtn) {
        startPauseBtn.textContent = 'B·∫Øt ƒê·∫ßu';
        startPauseBtn.classList.remove('bg-yellow-500', 'hover:bg-yellow-600');
        startPauseBtn.classList.add('bg-green-500', 'hover:bg-green-600');
    }
    if(resetBtn) resetBtn.classList.add('hidden');
}

// Event Listeners
document.addEventListener('DOMContentLoaded', function() {
    // Initialize localStorage
    initLocalStorage();
    
    // Initialize app
    initApp();
    
    // Navigation buttons
    document.getElementById('go-to-survey-btn')?.addEventListener('click', () => {
        window.location.href = 'survey.html';
    });
    
    document.getElementById('back-to-main-btn')?.addEventListener('click', () => {
        window.location.href = 'index.html';
    });
    
    document.getElementById('back-to-main-after-quiz')?.addEventListener('click', () => {
        window.location.href = 'index.html';
    });
    
    // Main page event listeners
    document.getElementById('set-limit-btn')?.addEventListener('click', async () => {
        const limitInput = document.getElementById('limit-input');
        const newLimit = parseInt(limitInput?.value, 10);
        if (!isNaN(newLimit) && newLimit > 0) {
            userData.limit = newLimit;
            saveData();
            showNotification("Gi·ªõi h·∫°n ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t", `Gi·ªõi h·∫°n h√†ng ng√†y c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l√† ${newLimit} ph√∫t.`);
            updateMainUI();
        }
    });

    document.getElementById('submit-usage-btn')?.addEventListener('click', async () => {
        let totalUsage = 0;
        socialApps.forEach(app => {
            const input = document.getElementById(`input-${app.id}`);
            const value = parseInt(input?.value, 10) || 0;
            if (!userData.appUsage[app.id]) userData.appUsage[app.id] = Array(7).fill(0);
            userData.appUsage[app.id][todayIndex] = value;
            totalUsage += value;
        });

        userData.weeklyData[todayIndex] = totalUsage;
        saveData();
        showNotification("C·∫≠p nh·∫≠t th√†nh c√¥ng", `T·ªïng th·ªùi gian s·ª≠ d·ª•ng h√¥m nay l√† ${totalUsage} ph√∫t.`);
        updateMainUI();
    });

    document.getElementById('add-activity-btn')?.addEventListener('click', async () => {
        const newActivityInput = document.getElementById('new-activity-input');
        const newActivityName = newActivityInput?.value.trim();
        if (newActivityName) {
            const newActivityId = newActivityName.replace(/\s+/g, '_').toLowerCase();
            const newActivity = { id: newActivityId, name: newActivityName };
            userData.customActivities = userData.customActivities || [];
            userData.customActivities.push(newActivity);
            saveData();
            if(newActivityInput) newActivityInput.value = '';
            showNotification("Ho·∫°t ƒë·ªông m·ªõi", "B·∫°n ƒë√£ th√™m m·ªôt ho·∫°t ƒë·ªông l√†nh m·∫°nh m·ªõi!");
            awardBadge('custom_activity');
            updateMainUI();
        }
    });

    document.addEventListener('click', async (e) => {
        if (e.target.matches('.complete-activity-btn')) {
            const activityId = e.target.dataset.id;
            const activityName = defaultHealthyActivities.find(a => a.id === activityId)?.name || userData.customActivities.find(a => a.id === activityId)?.name;
            
            // Check if already completed today
            const today = new Date().toISOString().slice(0, 10);
            if (userData.completedActivities[activityId] === today) {
                return; // Already completed today
            }
            
            // Mark activity as completed
            userData.completedActivities[activityId] = today;
            
            // Also save to today's activity history
            if (!userData.activityHistory[today]) {
                userData.activityHistory[today] = {};
            }
            userData.activityHistory[today][activityId] = true;
            
            saveData();

            awardBadge('first_activity');
            const allActivitiesCompleted = [...defaultHealthyActivities, ...(userData.customActivities || [])].every(activity => userData.completedActivities[activity.id]);
            if (allActivitiesCompleted) {
                awardBadge('all_activities');
            }
           
            const lastDate = userData.lastActivityDate;
            const isSequential = (lastDate && (new Date(today) - new Date(lastDate)) / (1000 * 60 * 60 * 24) === 1);
           
            if (activityId.includes('reading')) {
                userData.readingStreak = isSequential ? (userData.readingStreak || 0) + 1 : 1;
                if (userData.readingStreak >= 5) awardBadge('reading_streak_5');
                if (userData.readingStreak >= 10) awardBadge('reading_streak_10');
            }
            if (activityId.includes('exercise')) {
                userData.exerciseStreak = isSequential ? (userData.exerciseStreak || 0) + 1 : 1;
                if (userData.exerciseStreak >= 5) awardBadge('exercise_streak_5');
                if (userData.exerciseStreak >= 10) awardBadge('exercise_streak_10');
            }
            if (activityId.includes('learning')) {
                userData.learningStreak = isSequential ? (userData.learningStreak || 0) + 1 : 1;
                if (userData.learningStreak >= 5) awardBadge('learning_streak_5');
                if (userData.learningStreak >= 10) awardBadge('learning_streak_10');
            }
           
            userData.lastActivityDate = today;
            saveData();
            updateMainUI();
        }
    });

    // Activity history navigation
    document.getElementById('prev-day-btn')?.addEventListener('click', () => {
        currentHistoryDate.setDate(currentHistoryDate.getDate() - 1);
        updateActivityHistory();
    });

    document.getElementById('next-day-btn')?.addEventListener('click', () => {
        const today = new Date();
        if (currentHistoryDate < today) {
            currentHistoryDate.setDate(currentHistoryDate.getDate() + 1);
            updateActivityHistory();
        }
    });

    // Pomodoro Timer
    document.getElementById('start-pause-btn')?.addEventListener('click', () => {
        if (pomodoro.timeRemaining <= 0) {
            pomodoro.timeRemaining = pomodoro.workDuration;
            const timerStatus = document.getElementById('timer-status');
            if(timerStatus) timerStatus.textContent = 'Gi·ªù l√†m vi·ªác!';
        }
        if (pomodoro.isRunning) {
            pauseTimer();
        } else {
            startTimer();
        }
    });

    document.getElementById('reset-btn')?.addEventListener('click', resetTimer);

    // Survey page event listeners
    document.getElementById('start-quiz-btn')?.addEventListener('click', () => {
        const generateQuiz = (containerId, questions) => {
            const container = document.getElementById(containerId);
            if (!container) return;
            container.innerHTML = questions.map((q, index) => `
                <div class="quiz-question" data-category="${containerId}" data-index="${index}">
                    <p class="font-medium">${index + 1}. ${q.q}</p>
                    <div class="flex flex-wrap gap-2 mt-2">
                        ${quizOptions.map((option, optIndex) => `
                            <button data-score="${q.score[optIndex]}" class="quiz-option bg-white text-gray-700 px-3 py-1 rounded-full text-sm border border-gray-300 hover:bg-gray-100 transition duration-300">
                                ${option}
                            </button>
                        `).join('')}
                    </div>
                </div>
            `).join('');
            container.classList.remove('hidden');
        };

        generateQuiz('physical-questions', quizQuestions.physical);
        generateQuiz('mental-questions', quizQuestions.mental);
        generateQuiz('concentration-questions', quizQuestions.concentration);

        const startQuizBtn = document.getElementById('start-quiz-btn');
        const submitQuizBtn = document.getElementById('submit-quiz-btn');
        const quizStatus = document.getElementById('quiz-status');

        if(startQuizBtn) startQuizBtn.classList.add('hidden');
        if(submitQuizBtn) submitQuizBtn.classList.remove('hidden');
        if(quizStatus) quizStatus.textContent = 'H√£y tr·∫£ l·ªùi t·∫•t c·∫£ c√°c c√¢u h·ªèi ƒë·ªÉ xem k·∫øt qu·∫£.';
    });

    document.getElementById('submit-quiz-btn')?.addEventListener('click', async () => {
        const allQuestions = document.querySelectorAll('.quiz-question');
        let answeredCount = 0;
        let scores = { physical: 0, mental: 0, concentration: 0 };

        allQuestions.forEach(q => {
            const selected = q.querySelector('.quiz-option.bg-indigo-500');
            if (selected) {
                const category = q.dataset.category.replace('-questions', '');
                scores[category] += parseInt(selected.dataset.score, 10);
                answeredCount++;
            }
        });

        if (answeredCount === allQuestions.length) {
            const evaluation = getQuizResultEvaluation(scores);
           
            const quizEvaluationEl = document.getElementById('quiz-evaluation');
            if(quizEvaluationEl) quizEvaluationEl.innerHTML = evaluation.evaluationDetails;

            const dependencyScoreEl = document.getElementById('dependency-score');
            if(dependencyScoreEl) {
                dependencyScoreEl.textContent = `ƒêi·ªÉm ph·ª• thu·ªôc: ${evaluation.dependencyPercentage.toFixed(2)}%`;
            }

            const today = new Date().toISOString().slice(0, 10);
            userData.quizHistory.push({ date: today, scores: scores });
            saveData();

            const quizResultSection = document.getElementById('quiz-result-section');
            const quizStatus = document.getElementById('quiz-status');
            const submitQuizBtn = document.getElementById('submit-quiz-btn');

            if(quizResultSection) quizResultSection.classList.remove('hidden');
            if(quizStatus) quizStatus.classList.add('hidden');
            if(submitQuizBtn) submitQuizBtn.classList.add('hidden');
            
            awardBadge('quiz_pro');
           
            const dependencyPercentage = evaluation.dependencyPercentage;
            if (dependencyPercentage < 50) awardBadge('dependency_low_50');
            if (dependencyPercentage < 40) awardBadge('dependency_low_40');
            if (dependencyPercentage < 30) awardBadge('dependency_low_30');

            const quizChartCanvas = document.getElementById('quiz-chart');
            if (quizChartCanvas) {
                if (window.quizChart) window.quizChart.destroy();
                // ƒê√É S·ª¨A: C·∫≠p nh·∫≠t d·ªØ li·ªáu v√† c·∫•u h√¨nh bi·ªÉu ƒë·ªì radar
                window.quizChart = new Chart(quizChartCanvas.getContext('2d'), {
                    type: 'radar',
                    data: {
                        labels: ['Th·ªÉ ch·∫•t', 'Tinh th·∫ßn', 'T·∫≠p trung'],
                        datasets: [{
                            label: 'ƒêi·ªÉm s·ª©c kh·ªèe k·ªπ thu·∫≠t s·ªë (c√†ng cao c√†ng t·ªët)',
                            data: [20 - scores.physical, 20 - scores.mental, 20 - scores.concentration], // ƒê·ªïi 25 th√†nh 20
                            backgroundColor: 'rgba(99, 102, 241, 0.2)',
                            borderColor: '#6366f1',
                            borderWidth: 2,
                            pointBackgroundColor: '#6366f1'
                        }]
                    },
                    options: {
                        responsive: true,
                        elements: { line: { borderWidth: 3 } },
                        scales: { r: { suggestedMin: 0, suggestedMax: 20, pointLabels: { font: { size: 14 } } } } // ƒê·ªïi 25 th√†nh 20
                    }
                });
            }
           
            updateCharts();
        } else {
            const quizStatus = document.getElementById('quiz-status');
            if(quizStatus) {
                quizStatus.textContent = 'Vui l√≤ng tr·∫£ l·ªùi t·∫•t c·∫£ c√°c c√¢u h·ªèi.';
            }
        }
    });

    document.getElementById('quiz-content')?.addEventListener('click', (e) => {
        if (e.target.matches('.quiz-option')) {
            const parent = e.target.closest('.quiz-question');
            parent.querySelectorAll('.quiz-option').forEach(btn => {
                btn.classList.remove('bg-indigo-500', 'text-white');
                btn.classList.add('bg-white', 'text-gray-700');
            });
            e.target.classList.add('bg-indigo-500', 'text-white');
            e.target.classList.remove('bg-white', 'text-gray-700');
        }
    });

    // Initialize badges on first visit
    if (Object.keys(userData.badges).length === 0) {
        awardBadge('first_day');
    }
});
